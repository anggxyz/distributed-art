"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ethereum_generic_provider_1 = require("@0xcert/ethereum-generic-provider");
const ethereum_order_gateway_1 = require("@0xcert/ethereum-order-gateway");
const ethereum_sandbox_1 = require("@0xcert/ethereum-sandbox");
const spec_1 = require("@specron/spec");
const ledger_1 = require("../../../core/ledger");
const spec = new spec_1.Spec();
spec.before((stage) => __awaiter(this, void 0, void 0, function* () {
    const protocol = new ethereum_sandbox_1.Protocol(stage.web3);
    stage.set('protocol', yield protocol.deploy());
}));
spec.before((stage) => __awaiter(this, void 0, void 0, function* () {
    const provider = new ethereum_generic_provider_1.GenericProvider({
        client: stage.web3,
        accountId: yield stage.web3.eth.getCoinbase(),
    });
    stage.set('provider', provider);
}));
spec.before((stage) => __awaiter(this, void 0, void 0, function* () {
    const accounts = yield stage.web3.eth.getAccounts();
    stage.set('coinbase', accounts[0]);
    stage.set('bob', accounts[1]);
}));
spec.before((stage) => __awaiter(this, void 0, void 0, function* () {
    const provider = stage.get('provider');
    const ledgerId = stage.get('protocol').xcert.instance.options.address;
    const orderGatewayId = stage.get('protocol').orderGateway.instance.options.address;
    stage.set('ledger', new ledger_1.AssetLedger(provider, ledgerId));
    stage.set('gateway', new ethereum_order_gateway_1.OrderGateway(provider, orderGatewayId));
}));
spec.test('approves operator', (ctx) => __awaiter(this, void 0, void 0, function* () {
    const xcert = ctx.get('protocol').xcert;
    const bob = ctx.get('bob');
    const coinbase = ctx.get('coinbase');
    const ledger = ctx.get('ledger');
    yield ledger.approveOperator(bob);
    ctx.true(yield xcert.instance.methods.isApprovedForAll(coinbase, bob).call());
}));
spec.test('approves order gateway proxy as operator', (ctx) => __awaiter(this, void 0, void 0, function* () {
    const xcert = ctx.get('protocol').xcert;
    const ledger = ctx.get('ledger');
    const gateway = ctx.get('gateway');
    const coinbase = ctx.get('coinbase');
    const proxyId = ctx.get('protocol').nftokenSafeTransferProxy.instance.options.address;
    yield ledger.approveOperator(gateway);
    ctx.true(yield xcert.instance.methods.isApprovedForAll(coinbase, proxyId).call());
}));
exports.default = spec;
//# sourceMappingURL=approve-operator-instance-method.test.js.map