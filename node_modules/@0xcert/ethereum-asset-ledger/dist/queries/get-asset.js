"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const functions = [
    {
        signature: '0xc87b56dd',
        inputTypes: ['uint256'],
        outputTypes: ['string'],
    },
    {
        signature: '0x70c31afc',
        inputTypes: ['uint256'],
        outputTypes: ['bytes32'],
    },
];
function default_1(ledger, assetId) {
    return __awaiter(this, void 0, void 0, function* () {
        const data = yield Promise.all(functions.map((f) => __awaiter(this, void 0, void 0, function* () {
            try {
                const attrs = {
                    to: ledger.id,
                    data: f.signature + ledger.provider.encoder.encodeParameters(f.inputTypes, [assetId]).substr(2),
                };
                const res = yield ledger.provider.post({
                    method: 'eth_call',
                    params: [attrs, 'latest'],
                });
                return ledger.provider.encoder.decodeParameters(f.outputTypes, res.result)[0];
            }
            catch (error) {
                return null;
            }
        })));
        return {
            id: assetId,
            uri: data[0],
            imprint: data[1] ? data[1].substr(2) : data[1],
        };
    });
}
exports.default = default_1;
//# sourceMappingURL=get-asset.js.map