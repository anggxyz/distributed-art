import { GenericProvider, Mutation } from '@0xcert/ethereum-generic-provider';
import { AssetLedgerAbility, AssetLedgerBase, AssetLedgerCapability, AssetLedgerDeployRecipe, AssetLedgerInfo, AssetLedgerItem, AssetLedgerItemRecipe, AssetLedgerObjectUpdateRecipe, AssetLedgerTransferRecipe, AssetLedgerUpdateRecipe, OrderGatewayBase } from '@0xcert/scaffold';
export declare class AssetLedger implements AssetLedgerBase {
    protected _id: string;
    protected _provider: GenericProvider;
    static deploy(provider: GenericProvider, recipe: AssetLedgerDeployRecipe): Promise<Mutation>;
    static getInstance(provider: GenericProvider, id: string): AssetLedger;
    constructor(provider: GenericProvider, id: string);
    readonly id: string;
    readonly provider: GenericProvider;
    getAbilities(accountId: string): Promise<AssetLedgerAbility[]>;
    getApprovedAccount(assetId: string): Promise<string>;
    getAssetAccount(assetId: string): Promise<string>;
    getAsset(assetId: string): Promise<AssetLedgerItem>;
    getBalance(accountId: string): Promise<string>;
    getCapabilities(): Promise<AssetLedgerCapability[]>;
    getInfo(): Promise<AssetLedgerInfo>;
    getAssetIdAt(index: number): Promise<number>;
    getAccountAssetIdAt(accountId: string, index: number): Promise<number>;
    isApprovedAccount(assetId: string, accountId: string | OrderGatewayBase): Promise<boolean>;
    isTransferable(): Promise<boolean>;
    approveAccount(assetId: string, accountId: string | OrderGatewayBase): Promise<Mutation>;
    disapproveAccount(assetId: string): Promise<Mutation>;
    grantAbilities(accountId: string | OrderGatewayBase, abilities: AssetLedgerAbility[]): Promise<Mutation>;
    createAsset(recipe: AssetLedgerItemRecipe): Promise<Mutation>;
    destroyAsset(assetId: string): Promise<Mutation>;
    revokeAbilities(accountId: string | OrderGatewayBase, abilities: AssetLedgerAbility[]): Promise<Mutation>;
    revokeAsset(assetId: string): Promise<Mutation>;
    transferAsset(recipe: AssetLedgerTransferRecipe): Promise<Mutation>;
    enableTransfers(): Promise<Mutation>;
    disableTransfers(): Promise<Mutation>;
    updateAsset(assetId: string, recipe: AssetLedgerObjectUpdateRecipe): Promise<Mutation>;
    update(recipe: AssetLedgerUpdateRecipe): Promise<Mutation>;
    approveOperator(accountId: string | OrderGatewayBase): Promise<Mutation>;
    disapproveOperator(accountId: string | OrderGatewayBase): Promise<Mutation>;
    isApprovedOperator(accountId: string, operatorId: string | OrderGatewayBase): Promise<boolean>;
    protected getProxyId(): number;
}
