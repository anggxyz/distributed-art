"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ethereum_utils_1 = require("@0xcert/ethereum-utils");
const scaffold_1 = require("@0xcert/scaffold");
const approve_account_1 = require("../mutations/approve-account");
const create_asset_1 = require("../mutations/create-asset");
const deploy_1 = require("../mutations/deploy");
const destroy_asset_1 = require("../mutations/destroy-asset");
const grant_abilities_1 = require("../mutations/grant-abilities");
const revoke_abilities_1 = require("../mutations/revoke-abilities");
const revoke_asset_1 = require("../mutations/revoke-asset");
const safe_transfer_1 = require("../mutations/safe-transfer");
const set_approval_for_all_1 = require("../mutations/set-approval-for-all");
const set_enabled_1 = require("../mutations/set-enabled");
const transfer_1 = require("../mutations/transfer");
const update_1 = require("../mutations/update");
const update_asset_1 = require("../mutations/update-asset");
const get_abilities_1 = require("../queries/get-abilities");
const get_account_asset_id_at_1 = require("../queries/get-account-asset-id-at");
const get_approved_account_1 = require("../queries/get-approved-account");
const get_asset_1 = require("../queries/get-asset");
const get_asset_account_1 = require("../queries/get-asset-account");
const get_asset_id_at_1 = require("../queries/get-asset-id-at");
const get_balance_1 = require("../queries/get-balance");
const get_capabilities_1 = require("../queries/get-capabilities");
const get_info_1 = require("../queries/get-info");
const is_approved_for_all_1 = require("../queries/is-approved-for-all");
const is_enabled_1 = require("../queries/is-enabled");
class AssetLedger {
    static deploy(provider, recipe) {
        return __awaiter(this, void 0, void 0, function* () {
            return deploy_1.default(provider, recipe);
        });
    }
    static getInstance(provider, id) {
        return new this(provider, id);
    }
    constructor(provider, id) {
        this._provider = provider;
        this._id = this._provider.encoder.normalizeAddress(id);
    }
    get id() {
        return this._id;
    }
    get provider() {
        return this._provider;
    }
    getAbilities(accountId) {
        return __awaiter(this, void 0, void 0, function* () {
            accountId = this._provider.encoder.normalizeAddress(accountId);
            return get_abilities_1.default(this, accountId);
        });
    }
    getApprovedAccount(assetId) {
        return __awaiter(this, void 0, void 0, function* () {
            return get_approved_account_1.default(this, assetId);
        });
    }
    getAssetAccount(assetId) {
        return __awaiter(this, void 0, void 0, function* () {
            return get_asset_account_1.default(this, assetId);
        });
    }
    getAsset(assetId) {
        return __awaiter(this, void 0, void 0, function* () {
            return get_asset_1.default(this, assetId);
        });
    }
    getBalance(accountId) {
        return __awaiter(this, void 0, void 0, function* () {
            accountId = this._provider.encoder.normalizeAddress(accountId);
            return get_balance_1.default(this, accountId);
        });
    }
    getCapabilities() {
        return __awaiter(this, void 0, void 0, function* () {
            return get_capabilities_1.default(this);
        });
    }
    getInfo() {
        return __awaiter(this, void 0, void 0, function* () {
            return get_info_1.default(this);
        });
    }
    getAssetIdAt(index) {
        return __awaiter(this, void 0, void 0, function* () {
            return get_asset_id_at_1.default(this, index);
        });
    }
    getAccountAssetIdAt(accountId, index) {
        return __awaiter(this, void 0, void 0, function* () {
            accountId = this._provider.encoder.normalizeAddress(accountId);
            return get_account_asset_id_at_1.default(this, accountId, index);
        });
    }
    isApprovedAccount(assetId, accountId) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof accountId !== 'string') {
                accountId = yield accountId.getProxyAccountId(this.getProxyId());
            }
            accountId = this._provider.encoder.normalizeAddress(accountId);
            return accountId === (yield get_approved_account_1.default(this, assetId));
        });
    }
    isTransferable() {
        return __awaiter(this, void 0, void 0, function* () {
            return is_enabled_1.default(this);
        });
    }
    approveAccount(assetId, accountId) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof accountId !== 'string') {
                accountId = yield accountId.getProxyAccountId(this.getProxyId());
            }
            accountId = this._provider.encoder.normalizeAddress(accountId);
            return approve_account_1.default(this, accountId, assetId);
        });
    }
    disapproveAccount(assetId) {
        return __awaiter(this, void 0, void 0, function* () {
            return approve_account_1.default(this, '0x0000000000000000000000000000000000000000', assetId);
        });
    }
    grantAbilities(accountId, abilities) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof accountId !== 'string') {
                accountId = yield accountId.getProxyAccountId(0);
            }
            accountId = this._provider.encoder.normalizeAddress(accountId);
            let bitAbilities = ethereum_utils_1.bigNumberify(0);
            abilities.forEach((ability) => {
                bitAbilities = bitAbilities.add(ability);
            });
            return grant_abilities_1.default(this, accountId, bitAbilities);
        });
    }
    createAsset(recipe) {
        return __awaiter(this, void 0, void 0, function* () {
            const imprint = recipe.imprint || 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855';
            const receiverId = this._provider.encoder.normalizeAddress(recipe.receiverId);
            return create_asset_1.default(this, receiverId, recipe.id, `0x${imprint}`);
        });
    }
    destroyAsset(assetId) {
        return __awaiter(this, void 0, void 0, function* () {
            return destroy_asset_1.default(this, assetId);
        });
    }
    revokeAbilities(accountId, abilities) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof accountId !== 'string') {
                accountId = yield accountId.getProxyAccountId(0);
            }
            let allowSuperRevoke = false;
            if (abilities.indexOf(scaffold_1.SuperAssetLedgerAbility.MANAGE_ABILITIES) !== -1) {
                allowSuperRevoke = true;
            }
            accountId = this._provider.encoder.normalizeAddress(accountId);
            let bitAbilities = ethereum_utils_1.bigNumberify(0);
            abilities.forEach((ability) => {
                bitAbilities = bitAbilities.add(ability);
            });
            return revoke_abilities_1.default(this, accountId, bitAbilities, allowSuperRevoke);
        });
    }
    revokeAsset(assetId) {
        return __awaiter(this, void 0, void 0, function* () {
            return revoke_asset_1.default(this, assetId);
        });
    }
    transferAsset(recipe) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!recipe.senderId) {
                recipe.senderId = this.provider.accountId;
            }
            const senderId = this._provider.encoder.normalizeAddress(recipe.senderId);
            const receiverId = this._provider.encoder.normalizeAddress(recipe.receiverId);
            return this.provider.unsafeRecipientIds.indexOf(recipe.receiverId) !== -1
                ? transfer_1.default(this, senderId, receiverId, recipe.id)
                : safe_transfer_1.default(this, senderId, receiverId, recipe.id, recipe.data);
        });
    }
    enableTransfers() {
        return __awaiter(this, void 0, void 0, function* () {
            return set_enabled_1.default(this, true);
        });
    }
    disableTransfers() {
        return __awaiter(this, void 0, void 0, function* () {
            return set_enabled_1.default(this, false);
        });
    }
    updateAsset(assetId, recipe) {
        return __awaiter(this, void 0, void 0, function* () {
            return update_asset_1.default(this, assetId, recipe.imprint);
        });
    }
    update(recipe) {
        return __awaiter(this, void 0, void 0, function* () {
            return update_1.default(this, recipe.uriBase);
        });
    }
    approveOperator(accountId) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof accountId !== 'string') {
                accountId = yield accountId.getProxyAccountId(this.getProxyId());
            }
            accountId = this._provider.encoder.normalizeAddress(accountId);
            return set_approval_for_all_1.default(this, accountId, true);
        });
    }
    disapproveOperator(accountId) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof accountId !== 'string') {
                accountId = yield accountId.getProxyAccountId(this.getProxyId());
            }
            accountId = this._provider.encoder.normalizeAddress(accountId);
            return set_approval_for_all_1.default(this, accountId, false);
        });
    }
    isApprovedOperator(accountId, operatorId) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof operatorId !== 'string') {
                operatorId = yield operatorId.getProxyAccountId(this.getProxyId());
            }
            accountId = this._provider.encoder.normalizeAddress(accountId);
            operatorId = this._provider.encoder.normalizeAddress(operatorId);
            return is_approved_for_all_1.default(this, accountId, operatorId);
        });
    }
    getProxyId() {
        return this.provider.unsafeRecipientIds.indexOf(this.id) === -1
            ? 3
            : 2;
    }
}
exports.AssetLedger = AssetLedger;
//# sourceMappingURL=ledger.js.map