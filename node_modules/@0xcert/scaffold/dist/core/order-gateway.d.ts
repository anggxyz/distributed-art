import { MutationBase } from './mutation';
export declare enum OrderActionKind {
    CREATE_ASSET = 1,
    TRANSFER_ASSET = 2,
    TRANSFER_VALUE = 3,
    UPDATE_ASSET_IMPRINT = 4
}
export interface OrderGatewayBase {
    readonly id: string;
    claim(order: Order): Promise<string>;
    perform(order: Order, claim: string): Promise<MutationBase>;
    cancel(order: Order): Promise<MutationBase>;
}
export declare type OrderAction = OrderActionCreateAsset | OrderActionTransferAsset | OrderActionTransferValue | OrderActionUpdateAssetImprint;
export interface OrderActionCreateAsset {
    kind: OrderActionKind.CREATE_ASSET;
    ledgerId: string;
    receiverId?: string;
    assetId: string;
    assetImprint: string;
}
export interface OrderActionTransferAsset {
    kind: OrderActionKind.TRANSFER_ASSET;
    ledgerId: string;
    senderId?: string;
    receiverId?: string;
    assetId: string;
}
export interface OrderActionUpdateAssetImprint {
    kind: OrderActionKind.UPDATE_ASSET_IMPRINT;
    ledgerId: string;
    assetImprint: string;
    assetId: string;
}
export interface OrderActionTransferValue {
    kind: OrderActionKind.TRANSFER_VALUE;
    ledgerId: string;
    senderId?: string;
    receiverId?: string;
    value: string;
}
export declare class Order {
    makerId: string;
    takerId?: string;
    actions: OrderAction[];
    seed: number;
    expiration: number;
}
